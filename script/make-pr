#!/usr/bin/env ruby

$: << File.join(File.dirname(__FILE__), '../lib')

ENV['MONGOID_ENV'] = 'development'

require 'fe/boot_lite'
require 'fe/child_process_helper'

autoload :Jirra, 'jirra/client'

class PrMaker

  attr_reader :num, :repo_name, :jira_project

  def make_pr
    begin
      pr_info = gh_client.post_json("/repos/mongodb/#{repo_name}/pulls",
        title: @branch_name, head: "p-mongo:#{@branch_name}", base: 'master',
        body: "pr for #{@branch_name}")
      pr_num = pr_info['number']
    rescue Github::Client::ApiError => e
      if e.status == 422
        if e.body =~ /already exists/
          pulls = gh_client.repo('mongodb', repo_name).pulls
          pr_num = nil
          pulls.each do |pull|
            if pull.head_label == "p-mongo:#{@branch_name}"
              pr_num = pull.number
              break
            end
          end
          if pr_num.nil?
            raise
          end
        else
          raise
        end
      else
        raise
      end
    end

    if jira_project
      pr_url = "https://github.com/mongodb/#{repo_name}/pull/#{pr_num}"

      # https://developer.atlassian.com/server/jira/platform/jira-rest-api-for-remote-issue-links/
      payload = {
        globalId: "#{jira_project}-#{num}-pr-#{pr_num}",
        object: {
          url: pr_url,
          title: "Fix - PR ##{pr_num}",
          icon: {"url16x16":"https://github.com/favicon.ico"},
          status: {
            icon: {},
          },
        },
      }
      jira_client.post_json("issue/#{@jira_project.upcase}-#{@num}/remotelink", payload)
    end
  end

  private def gh_client
    @gh_client ||= Github::Client.new(
        username: ENV['GITHUB_USERNAME'],
        auth_token: ENV['GITHUB_TOKEN'],
      )
  end

  private def jira_client
    @jira_client ||= begin
      options = {
        :username     => ENV['JIRA_USERNAME'],
        :password     => ENV['JIRA_PASSWORD'],
        :site         => ENV['JIRA_SITE'],
      }

      Jirra::Client.new(options)
    end
  end
end

class TicketedPrMaker < PrMaker
  def initialize(num)
    @num = num

    @config = if num > 2000
      @repo_name = 'mongoid'
      @jira_project = 'mongoid'
    else
      @repo_name = 'mongo-ruby-driver'
      @jira_project = 'ruby'
    end

    @branch_name = num.to_s
  end
end

class CurrentPrMaker < PrMaker
  def initialize
    dir = Dir.pwd
    until %w(. /).include?(dir)
      case File.basename(dir)
      when 'ruby-driver'
        @repo_name = 'mongo-ruby-driver'
        break
      when 'mongoid'
        @repo_name = 'mongoid'
        break
      end
      dir = File.dirname(dir)
    end
    if @repo_name.nil?
      raise ArgumentError, "Cannot figure out the project"
    end
    @num = nil
    @jira_project = nil

    branch_output = ChildProcessHelper.check_output(%w(git status))
    @branch_name = branch_output.split("\n").first.split(' ').last
    if @branch_name.strip.empty?
      raise ArgumentError, "Cannot figure out branch name"
    end

    ChildProcessHelper.check_call(['git', 'pp', @branch_name])
  end
end

what = ARGV.shift
if what.nil?
  pr_maker = CurrentPrMaker.new
else
  num = what.to_i
  if num > 0
    pr_maker = TicketedPrMaker.new(num)
  else
    pr_maker = BranchPrMaker.new(what)
  end
end
pr_maker.make_pr
